#!/usr/bin/env python
# coding: utf-8
# 
# TST-Online command line identifiers quality checker. based on a well-known gold standard recommended in
# a book and also adopted by some software engineering literature initiatives towards improving the iden-
# tifiers quality. Also, it is based on a previously developed tool: qcheck.
#
# Marcos Nascimento, 2018-2019

import os
import sys
import json
import codecs
import glob
import argparse
import tstlib
import os.path

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import bin
from bin import iqchecklib
from fileinput import filename
from argparse import RawTextHelpFormatter

# Feedback Messages
NOREFERENCE = "There are no words or reference terms."
#NOREFERENCE = "Não há palavras ou termos de referência."
NOTSUITABLENAME = "does not appear to be a suitable name. You should use words from the programming assignment description."
#NOTSUITABLENAME = "não parece ser um nome adequado. Use palavras da descrição da atividade."
NOWARNINGS = "No warnings. Congratulations!"
#NOWARNINGS = "Nenhuma advertência. Parabéns!"

# Output Settings
COLNUMBERWIDTH = 5
COLTEXTWIDTH = 25
IQCHECKFILE = "iqcheck.json"
TSTFILE = ".tst/tst.json"
TSTDIR = os.path.expanduser("~/.tst/")
TSTCONFIG = os.path.expanduser(TSTDIR + "config.json")

LBLUE = '\033[1;34m'
LGREEN = '\033[1;32m'
LCYAN = '\033[1;36m'
RESET = '\033[0m'
BOLD = '\033[1m'

def get_referencewords(): 
    iqcheckjson = read_iqcheckjson(exit=True)
    if iqcheckjson.get("reference_words"):
        return iqcheckjson.get("reference_words")
    else:
        return {}

def get_referenceidentifiers(): 
    iqcheckjson = read_iqcheckjson(exit=True)
    if iqcheckjson.get("reference_identifiers"):
        return iqcheckjson.get("reference_identifiers")
    else:
        return {}

def write_results(tag, results, IQCHECKFILE):
    iqcheckjson = read_iqcheckjson(exit=True)
    if tag == "reference_words":
        if not get_referencewords():
            iqcheckjson[tag] = results
            with codecs.open(IQCHECKFILE, mode='w', encoding='utf-8') as fp:
                json.dump(iqcheckjson, fp, indent = 2, separators=(',', ': '), ensure_ascii=False)

        else:
            with codecs.open(IQCHECKFILE, mode='r', encoding='utf-8') as jf:
                data = json.load(jf)
            data[tag] = results
            with codecs.open(IQCHECKFILE, mode='w', encoding='utf-8') as fp:
                json.dump(data, fp, indent = 2, separators=(',', ': '), ensure_ascii=False)
    else:
        if not get_referenceidentifiers():
            iqcheckjson[tag] = results
            with codecs.open(IQCHECKFILE, mode='w', encoding='utf-8') as fp:
                json.dump(iqcheckjson, fp, indent = 2, separators=(',', ': '), ensure_ascii=False)

        else:
            with codecs.open(IQCHECKFILE, mode='r', encoding='utf-8') as jf:
                data = json.load(jf)
            data[tag] = results
            with codecs.open(IQCHECKFILE, mode='w', encoding='utf-8') as fp:
                json.dump(data, fp, indent = 2, separators=(',', ': '), ensure_ascii=False)

def read_iqcheckjson(exit=False, quit_on_fail=False):
    #Code borrowed from tstlib.py (c) 2011-2014 Dalton Serey, UFCG  
    if not os.path.exists(IQCHECKFILE):
        if quit_on_fail:
            msg = "iqcheck: file not found"
            print msg
            sys.exit(1)
        return {}
    try:
        with codecs.open(IQCHECKFILE, mode='r', encoding='utf-8') as f:
            iqcheckjson = json.loads(tstlib.to_unicode(f.read()))
        f.close()

    except ValueError:
        msg = "iqcheck: %s is corrupted" % IQCHECKFILE
        if exit or quit_on_fail:
            print msg
            sys.exit(1)
        raise CorruptedConfigFile(msg)
    
    return iqcheckjson

def get_username():
    configjson = read_tstconfig(exit=True)
    if configjson.get("user"):
        return configjson.get("user")
    else:
        return ''

def read_tstconfig(exit=False, quit_on_fail=False):
    #Code borrowed from tstlib.py (c) 2011-2014 Dalton Serey, UFCG
    if not os.path.exists(TSTCONFIG):
        if quit_on_fail:
            msg = "iqcheck: config.json file not found"
            print msg
            #sys.exit(1)
        return {}
    try:
        with codecs.open(TSTCONFIG, mode='r', encoding='utf-8') as f:
            configjson = json.loads(tstlib.to_unicode(f.read()))
    except ValueError:
        msg = "iqcheck: %s is corrupted" % TSTCONFIG
        if exit_on_fail:
            print msg
            #sys.exit()
        raise CorruptedFile(msg)
        
    return configjson

def get_activityid():
    tstjson = read_tstjson(exit=True)
    if tstjson.get("iid"):
        return tstjson.get("iid")
    else:
        return '0'

def read_tstjson(exit=False, quit_on_fail=False):
    #Code borrowed from tstlib.py (c) 2011-2014 Dalton Serey, UFCG
    if not os.path.exists(TSTFILE):
        if quit_on_fail:
            msg = "iqcheck: tst.json file not found"
            print msg
            #sys.exit(1)
        return {}
    try:
        with codecs.open(TSTFILE, mode='r', encoding='utf-8') as f:
            tstjson = json.loads(tstlib.to_unicode(f.read()))
        f.close()

    except ValueError:
        msg = "iqcheck: %s is corrupted" % TSTFILE
        if exit or quit_on_fail:
            print msg
            #sys.exit(1)
        raise CorruptedConfigFile(msg)
    
    return tstjson

def pack_results(results):    
    return tstlib.data2json(results)

def pack_readablemetric(results):
    line = ""
    if not results:
        return line

    #Iqcheckscore
    if results.get("iqcheckscore") is not None:
        line += 'iqcheckscore: {0:>{width}.{precision}f}'.format(results.get("iqcheckscore"), \
                                                   width = COLNUMBERWIDTH + 3, precision = 2)
    return line

def quality_report(filename):
    return { "iqcheck": iqchecklib.iqcheck(get_referencewords(), iqchecklib.get_identifiers(filename)) }
    
def pack_logfeedback(results):
    identifier = 0
    for feedback, message in results.items():
        if len(message) > 1:
            if feedback == "iqcheck":
                identifier += 1    
    
    return { "identifierwarning": identifier, "feedback": results }

def pack_markdownfeedback(filename, results):
    identifierline = "### Identifiers\n"
    #identifierline = "### Identificadores\n"
    identifierwarnings = 0
    
    if not results:
        return ""
    
    #Iqcheck
    if results.get("iqcheck") and len(results.get("iqcheck")) >= 1:
        for i in range(0, len(results.get("iqcheck"))):
            identifierline += '- {}*{}*{} {}\n'.format(BOLD,
                                                       results.get("iqcheck")[i],
                                                       RESET,
                                                       NOTSUITABLENAME) 
            identifierwarnings += 1
    
    if identifierwarnings:
        header = LBLUE + "# %s\n\n" % filename
        report = LCYAN + "**%d Warning(s)** \n\n" % (identifierwarnings) + RESET
        #report = LCYAN + "**%d Advertência(s)** \n\n" % (identifierwarnings) + RESET
        messages = identifierline if identifierwarnings else ""

        text = header + report + messages[:-1]
    else:
        text = LCYAN + "** %s **" % NOWARNINGS + RESET
    
    return text

def get_logdata(filenames, output):
    content = {}
    content.update({"filename": filenames})
    content.update({"iid": get_activityid()})
    content.update({"user": get_username()})
    content.update({"identifiers": iqchecklib.get_identifiers(filenames)}) 
    content.update({"positives": iqchecklib.get_positiveidentifiers(get_referencewords(), iqchecklib.get_identifiers(filenames))})
    content.update({"negatives": iqchecklib.get_negativeidentifiers(get_referencewords(), iqchecklib.get_identifiers(filenames))})
    content.update({"iqcheckscore": iqchecklib.iqcheckscore(get_referencewords(), iqchecklib.get_identifiers(filenames))})
    return content

def parse_arguments():
    parser = argparse.ArgumentParser(description='Check program identifiers quality written Python through static code analysis.',
                                      formatter_class=RawTextHelpFormatter)
    parser.add_argument("-m", "--metric",
                         nargs = 1,
                         help="get value of iqcheckscore")
    parser.add_argument("-f", "-fb", "--feedback",
                         nargs = 1,
                         help="present warning messages referring to code identifiers quality")
    parser.add_argument("-s","--set",
                         nargs = 1,
                         help="set reference vocabulary and identifiers")
    parser.add_argument("-o", "--outputformat",
                        type=str, default="human",
                        choices=["human","json"],
                        help="set output format")
    
    parser.add_argument("filename", nargs="*", default = [""])
    
    args = parser.parse_args()
    if args.metric:
        filenames = args.metric[0]
        function = "metric"
    elif args.set:
        filenames = args.set[0]
        function = "set"
    elif args.feedback:
        filenames = args.feedback[0]
        function = "feedback"
    elif args.filename:
        filenames = args.filename[0]
        function = "feedback"
    
    return filenames, function, args.outputformat

def main():   
    filenames, function, outputformat = parse_arguments()
    logit = ""
    try:
        if function in ('metric') :
            # metric output human-readable format
            if get_referencewords():
                results = { "iqcheckscore": iqchecklib.iqcheckscore(get_referencewords(), iqchecklib.get_identifiers(filenames)) }
                report = pack_results(results) if outputformat == 'json' else pack_readablemetric(results)
            else:
                report = NOREFERENCE
            
        elif function in ('set'): 
            # set reference solution file               
            problemtext_filename = glob.glob('*.yaml')
            if not problemtext_filename:
                print( "iqcheck: the problem specification description in yaml file is needed.")
                sys.exit()

            else:
                problem_vocabulary = iqchecklib.extract_problemvocabulary(problemtext_filename[0])
                write_results("reference_words", problem_vocabulary, IQCHECKFILE)
                identifiers = iqchecklib.get_identifiers(filenames)
                write_results("reference_identifiers", identifiers, IQCHECKFILE)
                report = IQCHECKFILE + " was created."

        elif function in ('feedback'): 
            # feedback output human-readable format
            if not get_referencewords():
                report = NOREFERENCE
            else:
                results = quality_report(filenames)
                report = pack_results(results) if outputformat == 'json' else pack_markdownfeedback(filenames, results)
                logit = get_logdata(filenames, pack_logfeedback(results))
        
        print report
        # is log active?
        if logit:
            iqchecklib.save(logit)
            
    except IOError:
        print("Usage: tst iqcheck [options] code.py")
        sys.exit(1)
    
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: tst iqcheck [options] code.py")
        sys.exit()
     
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("check code identifiers quality")
        sys.exit()
    
    main()